-- CREATE DATABASE
CREATE DATABASE JAN;

-- USE DATABASE
USE JAN;

-- DROP DATABASE
DROP DATABASE JAN;

-- MODIFY DATABASE NAME (MySQL doesn't support renaming databases directly)
-- Workaround: Create a new database and copy data
CREATE DATABASE JAN2025;

-- VIEW ALL TABLES
SHOW TABLES;

-- VIEW TABLE DETAILS
DESCRIBE EMPLOYEEDETAILS;

-- RENAME TABLE COLUMN
ALTER TABLE EMPLOYEEDETAILS CHANGE COLUMN old_column_name new_column_name COLUMN_TYPE;

-- CREATE TABLES
CREATE TABLE DEPARTMENT (
    DID INT PRIMARY KEY,
    DNAME VARCHAR(40),
    LOCATION VARCHAR(40)
);

CREATE TABLE EMPLOYEEDETAILS (
    EID INT AUTO_INCREMENT PRIMARY KEY,
    ENAME VARCHAR(20),
    EAGE INT CHECK (EAGE >=18),
    DEPARTMENT VARCHAR(20),
    DID INT,
    SALARY DECIMAL(10,2),
    CITY VARCHAR(20),
    FOREIGN KEY (DID) REFERENCES DEPARTMENT(DID) ON UPDATE CASCADE ON DELETE CASCADE
);

-- INSERT INTO TABLE
INSERT INTO DEPARTMENT VALUES 
(30, 'QA', 'GROUNDFLOOR'),
(20, 'FS', 'FIRSTFLOOR');

INSERT INTO EMPLOYEEDETAILS (ENAME, EAGE, DEPARTMENT, DID, SALARY, CITY) VALUES
('NARESH', 23, 'QA', 30, 30000, 'NAVSARI'),
('MAHESH', 22, 'DA', 20, 25000, 'ANAND'),
('JAYESH', 24, 'DS', 30, 40000, 'AHMEDABAD');

-- SELECT STATEMENTS
SELECT * FROM EMPLOYEEDETAILS;
SELECT * FROM DEPARTMENT;

-- UPDATE TABLE
UPDATE EMPLOYEEDETAILS SET EAGE = 22 WHERE EID = 1;
UPDATE EMPLOYEEDETAILS SET SALARY = 25000;

-- DELETE ROWS
DELETE FROM EMPLOYEEDETAILS WHERE EID = 8;
TRUNCATE TABLE EMPLOYEEDETAILS;
DROP TABLE EMPLOYEEDETAILS;

-- WHERE CLAUSE
SELECT * FROM EMPLOYEEDETAILS WHERE DEPARTMENT = 'QA';

-- AGGREGATE FUNCTIONS
SELECT SUM(SALARY) FROM EMPLOYEEDETAILS;
SELECT MAX(SALARY) FROM EMPLOYEEDETAILS;
SELECT COUNT(EID) FROM EMPLOYEEDETAILS;
SELECT AVG(SALARY) FROM EMPLOYEEDETAILS WHERE DEPARTMENT='QA';

-- GROUP BY AND HAVING
SELECT DEPARTMENT, COUNT(EID) FROM EMPLOYEEDETAILS GROUP BY DEPARTMENT HAVING COUNT(EID) > 5;

-- CREATE VIEW
CREATE VIEW EMPVIEW AS
SELECT ENAME, SALARY FROM EMPLOYEEDETAILS WHERE SALARY > 20000;

-- INDEXES
CREATE INDEX IDX_SALARY ON EMPLOYEEDETAILS(SALARY);
CREATE UNIQUE INDEX IDX_UNIQUE ON EMPLOYEEDETAILS(ENAME);
CREATE INDEX IDX_DEPT_SALARY ON EMPLOYEEDETAILS(DEPARTMENT, SALARY);

-- SHOW INDEXES
SHOW INDEX FROM EMPLOYEEDETAILS;

-- Creating Employee Table
CREATE TABLE EMP (
    EMPLOYEE_ID INT PRIMARY KEY,
    FIRST_NAME VARCHAR(30),
    LAST_NAME VARCHAR(30),
    EMAIL VARCHAR(50),
    PHONE_NUMBER VARCHAR(15),
    HIRE_DATE DATE,
    JOB_ID INT,
    SALARY DECIMAL(10,2),
    COMMISSION_PCT DECIMAL(5,2),
    MANAGER_ID INT,
    DEPARTMENT_ID INT
);

-- Truncate EMP Table
TRUNCATE TABLE EMP;

-- Inserting Employee Data
INSERT INTO EMP (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID) VALUES
(1, 'John', 'Doe', 'john.doe@example.com', '5551234', '2023-01-15', 10, 60000, 0.15, 301, 10),
(2, 'Alice', 'Smith', 'alice.s@example.com', '5552345', '2022-05-20', 11, 75000, 0.20, 302, 11),
(3, 'Bob', 'Johnson', 'bob.j@example.com', '5553456', '2023-03-01', 12, 50000, 0.10, 301, 11),
(4, 'Eve', 'Williams', 'eve.w@example.com', '5554567', '2022-09-10', 10, 65000, 0.15, 303, 12),
(5, 'Charlie', 'Brown', 'charlie.b@example.com', '5555678', '2023-02-01', 13, 80000, 0.25, 302, 13);

-- Queries
SELECT * FROM EMP;
SELECT FIRST_NAME AS FIRSTNAME, LAST_NAME AS LASTNAME FROM EMP;
SELECT DISTINCT DEPARTMENT_ID FROM EMP;
SELECT * FROM EMP ORDER BY FIRST_NAME DESC;
SELECT FIRST_NAME, LAST_NAME, SALARY, SALARY * 0.15 AS PF FROM EMP;
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY FROM EMP ORDER BY SALARY ASC;
SELECT SUM(SALARY) AS TOTAL_SALARIES FROM EMP;
SELECT MAX(SALARY) AS MAX_SALARY, MIN(SALARY) AS MIN_SALARY FROM EMP;
SELECT AVG(SALARY) AS AVG_SALARY, COUNT(EMPLOYEE_ID) AS NUM_EMP FROM EMP;
SELECT COUNT(EMPLOYEE_ID) AS NUM_EMP FROM EMP;
SELECT COUNT(JOB_ID) AS TOTAL_JOBS FROM EMP;

-- Subqueries
SELECT * FROM EMP WHERE SALARY > (SELECT AVG(SALARY) FROM EMP);
SELECT * FROM EMP WHERE DEPARTMENT_ID = (SELECT EMPLOYEE_ID FROM EMP WHERE EMPLOYEE_ID = 102);

-- Creating Department Table
CREATE TABLE DEPARTMENT (
    DID INT PRIMARY KEY,
    DNAME VARCHAR(50),
    LOCATION VARCHAR(50)
);

-- Inserting Department Data
INSERT INTO DEPARTMENT VALUES
(10, 'CLOUD', 'GROUNDFLOOR'),
(11, 'BACKEND', 'FIRSTFLOOR'),
(12, 'DEVOPS', 'SECONDFLOOR'),
(13, 'DS', 'SECONDFLOOR'),
(14, 'DA', NULL);

-- Creating Manager Table
CREATE TABLE MANAGER (
    MID INT PRIMARY KEY,
    MNAME VARCHAR(30),
    DID INT,
    FOREIGN KEY (DID) REFERENCES DEPARTMENT(DID)
);

-- Inserting Manager Data
INSERT INTO MANAGER VALUES
(101, 'SURESH', 10),
(102, 'MUKESH', 11),
(103, 'RAMESH', 12),
(104, 'JIGNESH', 13);

-- Creating Project Table
CREATE TABLE PROJECT (
    PID INT PRIMARY KEY,
    PNAME VARCHAR(50),
    EID INT,
    FOREIGN KEY (EID) REFERENCES EMP(EMPLOYEE_ID)
);

-- Inserting Project Data
INSERT INTO PROJECT VALUES
(101, 'CHATBOT', 1),
(102, 'WEB SCRAPING', 1),
(103, 'ECOMMERCE APP', 2),
(104, 'WEBSITE', 3);

-- Joins
SELECT * FROM EMP E JOIN DEPARTMENT D ON E.DEPARTMENT_ID = D.DID;  -- Inner Join
SELECT * FROM EMP E LEFT JOIN DEPARTMENT D ON E.DEPARTMENT_ID = D.DID;  -- Left Join
SELECT * FROM EMP E RIGHT JOIN DEPARTMENT D ON E.DEPARTMENT_ID = D.DID; -- Right Join

-- Fetching Employee Name, Department Name, Manager Name & Project Name
SELECT E.FIRST_NAME, D.DNAME, M.MNAME, P.PNAME
FROM EMP E
INNER JOIN DEPARTMENT D ON E.DEPARTMENT_ID = D.DID
INNER JOIN MANAGER M ON D.DID = M.DID
INNER JOIN PROJECT P ON P.EID = E.EMPLOYEE_ID;


-- FUNCTIONS

SELECT LOWER(FIRST_NAME) FROM EMP;

SELECT UPPER(FIRST_NAME) AS CAPITAL_LETTER, 
CHAR_LENGTH(FIRST_NAME) FROM EMP WHERE CHAR_LENGTH(FIRST_NAME) > 6;

SELECT LEFT(FIRST_NAME,2) FROM EMP;

SELECT RIGHT(FIRST_NAME,2) FROM EMP;

SELECT SUBSTRING(FIRST_NAME,2,1) FROM EMP;

SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS FULL_NAME FROM EMP;

SELECT CONCAT(LEFT(FIRST_NAME,1), LEFT(LAST_NAME,1)) FROM EMP;

SELECT CONCAT(LEFT(FIRST_NAME,1), '.', LEFT(LAST_NAME,1), '@OUTLOOK.COM') FROM EMP;

SELECT MONTH(HIRE_DATE) AS MONTHNAME, YEAR(HIRE_DATE) AS YEARNAME FROM EMP;

SELECT DATE_FORMAT(HIRE_DATE,'%m-%Y') FROM EMP;

SELECT CONCAT(MONTHNAME(HIRE_DATE), ' ', YEAR(HIRE_DATE)) FROM EMP;

-- PROCEDURES

DELIMITER // 
CREATE PROCEDURE PROC1()
BEGIN 
    SELECT FIRST_NAME, HIRE_DATE FROM EMP;
END //
DELIMITER ;

CALL PROC1();

DELIMITER //
CREATE PROCEDURE GETEMPDEPTMANID(IN DEPARTMENT VARCHAR(20), IN MANAGER VARCHAR(20))
BEGIN
    SELECT DEPARTMENT_ID, MANAGER_ID FROM EMP 
    WHERE DEPARTMENT_ID = DEPARTMENT AND MANAGER_ID = MANAGER; 
END //
DELIMITER ;

CALL GETEMPDEPTMANID('11', '302');

DROP PROCEDURE GETEMPDEPTMANID;

ALTER TABLE EMP ADD CITY VARCHAR(20);
ALTER TABLE EMP ADD GENDER VARCHAR(10);

UPDATE EMP SET CITY='VADODARA' WHERE EMPLOYEE_ID IN (1,3,5);
UPDATE EMP SET CITY='VADODARA' WHERE EMPLOYEE_ID IN (2,4);

UPDATE EMP SET GENDER='MALE' WHERE EMPLOYEE_ID IN (1,3,5);
UPDATE EMP SET GENDER='FEMALE' WHERE EMPLOYEE_ID IN (2,4);

DELIMITER //
CREATE PROCEDURE GETEMPIDDEPTGEN(IN EMPID INT, IN DEPT VARCHAR(20), IN GEN VARCHAR(10))
BEGIN
    SELECT EMPLOYEE_ID, DEPARTMENT_ID, GENDER FROM EMP 
    WHERE EMPLOYEE_ID = EMPID AND DEPARTMENT_ID = DEPT AND GENDER = GEN;
END //
DELIMITER ;

CALL GETEMPIDDEPTGEN(1, '10', 'MALE');

CREATE TABLE ORDERS(
    ORDERID VARCHAR(20) PRIMARY KEY,
    CUSTOMERID VARCHAR(20),
    ORDERDATE DATE,
    TOTALAMOUNT INT
);

INSERT INTO ORDERS (ORDERID, CUSTOMERID, ORDERDATE, TOTALAMOUNT) VALUES
('ORD001', 'CUST001', '2024-01-15', 250),
('ORD002', 'CUST002', '2024-01-16', 150),
('ORD003', 'CUST003', '2024-01-17', 300);

DELIMITER //
CREATE PROCEDURE GETCUSTOMER(IN CUSTID VARCHAR(20))
BEGIN
    SELECT CUSTOMERID, ORDERID, ORDERDATE, TOTALAMOUNT FROM ORDERS WHERE CUSTOMERID = CUSTID;
END //
DELIMITER ;

CALL GETCUSTOMER('CUST001');

DELIMITER //
CREATE PROCEDURE ADDCUSTOMER(IN ORDERID VARCHAR(20), IN CUSTID VARCHAR(20), IN ORDERDATE DATE, IN TOTALAMOUNT INT)
BEGIN
    INSERT INTO ORDERS (ORDERID, CUSTOMERID, ORDERDATE, TOTALAMOUNT) VALUES (ORDERID, CUSTID, ORDERDATE, TOTALAMOUNT);
END //
DELIMITER ;

CALL ADDCUSTOMER('ORD011', 'CUST002', '2024-01-24', 200);

-- STORED PROCEDURE WITH OUTPUT PARAMETER
DELIMITER //
CREATE PROCEDURE DOUBLENUMBER(IN INPUTNUM INT, OUT OUTPUTNUM INT)
BEGIN
    SET OUTPUTNUM = INPUTNUM * 2;
END //
DELIMITER ;

CALL DOUBLENUMBER(5, @RESULT);
SELECT @RESULT;

DROP PROCEDURE DOUBLENUMBER;

-- Create Customers Table
CREATE TABLE CUSTOMER (
    CUSTOMERID VARCHAR(20) PRIMARY KEY,
    FIRST_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50),
    EMAIL VARCHAR(100)
);

INSERT INTO CUSTOMER VALUES ('CUST001', 'John', 'Doe', 'johndoe@example.com');

-- Create Products Table
CREATE TABLE PRODUCTS (
    PRODUCTID VARCHAR(20) PRIMARY KEY,
    PRODUCTNAME VARCHAR(50),
    DESCRIPTION VARCHAR(100),
    PRICE DECIMAL(10,2)
);

INSERT INTO PRODUCTS VALUES ('PROD001', 'Laptop', 'Gaming Laptop', 1200.50);

-- Create Orders Table
CREATE TABLE ORDERS (
    ORDERID VARCHAR(20) PRIMARY KEY,
    CUSTOMERID VARCHAR(20),
    ORDERDATE DATE,
    FOREIGN KEY (CUSTOMERID) REFERENCES CUSTOMER(CUSTOMERID)
);

-- Create OrderDetails Table
CREATE TABLE ORDERDETAILS (
    ORDERID VARCHAR(20),
    PRODUCTID VARCHAR(20),
    QTY INT,
    UNITPRICE DECIMAL(10,2),
    FOREIGN KEY (ORDERID) REFERENCES ORDERS(ORDERID),
    FOREIGN KEY (PRODUCTID) REFERENCES PRODUCTS(PRODUCTID)
);

-- Procedure to Get Customer Details
DELIMITER //
CREATE PROCEDURE spGETCUSTOMER(IN CUSTID VARCHAR(20))
BEGIN
    SELECT FIRST_NAME, LAST_NAME, EMAIL FROM CUSTOMER WHERE CUSTOMERID = CUSTID;
END //
DELIMITER ;

CALL spGETCUSTOMER('CUST010');

-- Procedure to Add a Product
DELIMITER //
CREATE PROCEDURE spADDPRODUCT(IN PRODUCTID VARCHAR(20), IN PRODUCTNAME VARCHAR(50), IN DESCRIPTION VARCHAR(100), IN PRICE DECIMAL(10,2))
BEGIN
    INSERT INTO PRODUCTS VALUES(PRODUCTID, PRODUCTNAME, DESCRIPTION, PRICE);
END //
DELIMITER ;

CALL spADDPRODUCT('PROD004', 'Smartphone', 'Android Phone', 900);

-- Procedure to Update Product Price
DELIMITER //
CREATE PROCEDURE spUPDATEPRODUCT(IN PRODUCTID VARCHAR(20), IN NEWPRICE DECIMAL(10,2))
BEGIN
    UPDATE PRODUCTS SET PRICE = NEWPRICE WHERE PRODUCTID = PRODUCTID;
END //
DELIMITER ;

CALL spUPDATEPRODUCT('PROD004', 900);

-- Procedure to Get Orders in Date Range
DELIMITER //
CREATE PROCEDURE spGETORDERS(IN STARTDATE DATE, IN ENDDATE DATE)
BEGIN 
    SELECT ORDERID FROM ORDERS WHERE ORDERDATE BETWEEN STARTDATE AND ENDDATE;
END //
DELIMITER ;

CALL spGETORDERS('2024-01-01', '2024-03-03');

-- Procedure to Get Order Total
DELIMITER //
CREATE PROCEDURE spORDERTOTAL(IN ORDERID VARCHAR(20), OUT TOTALAMOUNT INT)
BEGIN
    SELECT SUM(QTY * UNITPRICE) INTO TOTALAMOUNT FROM ORDERDETAILS WHERE ORDERID = ORDERID;
END //
DELIMITER ;

CALL spORDERTOTAL('ORD001', @RESULT);
SELECT @RESULT;

/*Create a stored procedure that takes a number N as an input, and returns the top N
products by total sales from a products table, and an order details table.*/
DELIMITER //
CREATE PROCEDURE spTOPN(IN N INT)
BEGIN
  SELECT  * FROM PRODUCTS LIMIT N;
END //
DELIMITER ;

CALL spTOPN(2);

-- ==============================
-- Create Tables
-- ==============================
CREATE TABLE tblEmployee (
  Id INT PRIMARY KEY,
  Name VARCHAR(30),
  Salary INT,
  Gender VARCHAR(10),
  DepartmentId INT
);

CREATE TABLE tblEmployeeAudit (
  Id INT AUTO_INCREMENT PRIMARY KEY,
  AuditData VARCHAR(1000)
);

CREATE TABLE tblDepartment (
  DeptId INT PRIMARY KEY,
  DeptName VARCHAR(20)
);

CREATE TABLE PRODUCTS (
  PRODUCTID VARCHAR(10) PRIMARY KEY,
  Name VARCHAR(50),
  QTY INT
);

CREATE TABLE ORDERS (
  ORDERID VARCHAR(10) PRIMARY KEY,
  CUSTOMERID VARCHAR(10),
  ORDERDATE DATETIME
);

-- ==============================
-- Insert Sample Data
-- ==============================
INSERT INTO tblEmployee VALUES (1, 'John', 5000, 'Male', 3);
INSERT INTO tblEmployee VALUES (2, 'Mike', 3400, 'Male', 2);
INSERT INTO tblEmployee VALUES (3, 'Pam', 6000, 'Female', 1);

INSERT INTO tblDepartment VALUES (1, 'IT');
INSERT INTO tblDepartment VALUES (2, 'Payroll');
INSERT INTO tblDepartment VALUES (3, 'HR');
INSERT INTO tblDepartment VALUES (4, 'Admin');

INSERT INTO PRODUCTS VALUES ('PRD001', 'Laptop', 10);
INSERT INTO PRODUCTS VALUES ('PRD002', 'Mouse', 50);

INSERT INTO ORDERS VALUES ('ORD001', 'CUST001', '2024-03-01');

-- ==============================
-- Create Triggers
-- ==============================

DELIMITER //

-- Trigger: Log New Employee Insertions
CREATE TRIGGER tr_tblEmployee_ForInsert
AFTER INSERT ON tblEmployee
FOR EACH ROW
BEGIN
    INSERT INTO tblEmployeeAudit (AuditData) 
    VALUES (CONCAT('New employee with Id = ', NEW.Id, ' added at ', NOW()));
END;
//

-- Trigger: Log Employee Deletions
CREATE TRIGGER tr_tblEmployee_ForDelete
AFTER DELETE ON tblEmployee
FOR EACH ROW
BEGIN
    INSERT INTO tblEmployeeAudit (AuditData) 
    VALUES (CONCAT('Employee with Id = ', OLD.Id, ' deleted at ', NOW()));
END;
//

delimiter //
-- Trigger: Prevent Negative Stock
CREATE TRIGGER PREVENTNEGATIVESTOCK
BEFORE UPDATE ON PRODUCTS
FOR EACH ROW
BEGIN
    IF NEW.QTY < 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'STOCK QUANTITY CANNOT BE NEGATIVE';
    END IF;
END;
//

-- Trigger: Auto-set Order Date if NULL
CREATE TRIGGER tr_SETORDERDATE 
BEFORE INSERT ON ORDERS
FOR EACH ROW
BEGIN
    SET NEW.ORDERDATE = COALESCE(NEW.ORDERDATE, NOW());
END;
//

DELIMITER ;

-- ==============================
-- Create View for Employee Details
-- ==============================
CREATE VIEW vWEmployeeDetails AS
SELECT e.Id, e.Name, e.Gender, d.DeptName
FROM tblEmployee e
JOIN tblDepartment d ON e.DepartmentId = d.DeptId;

-- ==============================
-- Testing the Triggers
-- ==============================

-- Insert into Employee (Audit Trigger Test)
INSERT INTO tblEmployee VALUES (7, 'Tan', 2300, 'Female', 3);

-- Check Employee Audit Log
SELECT * FROM tblEmployeeAudit;

-- Delete Employee (Audit Trigger Test)
DELETE FROM tblEmployee WHERE Id = 2;

-- Check Updated Audit Log
SELECT * FROM tblEmployeeAudit;

-- Attempt to Insert Negative Stock (Should Fail)
UPDATE PRODUCTS SET QTY = -1 WHERE PRODUCTID = 'PRD001';

-- Insert Order Without Date (Auto Date Trigger Test)
INSERT INTO ORDERS (ORDERID, CUSTOMERID) VALUES ('ORD002', 'CUST002');

-- Check Orders Table
SELECT * FROM ORDERS;

-- Check Employee View
SELECT * FROM vWEmployeeDetails;


-- Create the Department Table
CREATE TABLE tblDepartment (
    DeptId INT PRIMARY KEY,
    DeptName NVARCHAR(20)
);

-- Insert sample data into tblDepartment
INSERT INTO tblDepartment VALUES (1, 'IT');
INSERT INTO tblDepartment VALUES (2, 'Payroll');
INSERT INTO tblDepartment VALUES (3, 'HR');
INSERT INTO tblDepartment VALUES (4, 'Admin');

-- Create the Employee Table
CREATE TABLE tblEmployee (
    Id INT PRIMARY KEY,
    Name NVARCHAR(50),
    Gender NVARCHAR(10),
    DepartmentId INT,
    FOREIGN KEY (DepartmentId) REFERENCES tblDepartment(DeptId)
);

-- Create a View
CREATE VIEW vWEmployeeDetails AS
SELECT e.Id, e.Name, e.Gender, d.DeptName
FROM tblEmployee e
JOIN tblDepartment d ON e.DepartmentId = d.DeptId;

-- Create Instead Of Insert Trigger Equivalent in MySQL
DELIMITER //

CREATE TRIGGER tr_vWEmployeeDetails_BeforeInsert
BEFORE INSERT ON tblEmployee
FOR EACH ROW
BEGIN
    DECLARE deptExists INT;

    -- Check if Department Name exists in tblDepartment
    SELECT DeptId INTO deptExists 
    FROM tblDepartment 
    WHERE DeptName = NEW.DepartmentId;

    -- If DepartmentId does not exist, raise an error
    IF deptExists IS NULL THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid Department Name. Statement terminated';
    ELSE
        -- Assign valid DepartmentId
        SET NEW.DepartmentId = deptExists;
    END IF;
END;
//

DELIMITER ;

-- Test View and Trigger
SELECT * FROM vWEmployeeDetails;

-- Insert into View (Handled by Trigger)
INSERT INTO tblEmployee (Id, Name, Gender, DepartmentId) 
VALUES (7, 'Valarie', 'Female', 'IT');
